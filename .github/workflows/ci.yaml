# workflow name
name: CI

# on events
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - created

# jobs to run
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.20
      uses: actions/setup-go@v2
      with:
        go-version: "1.20"
      id: go
    - name: Set up Go for root
      run: |
        sudo ln -sf `which go` `sudo which go` || true
        sudo go version
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: get go version
      run: go version
    - name: Gofmt and License checks
      run: make check
    - name: unit tests
      run: make test
    - name: Codecov
      uses: codecov/codecov-action@v1.0.12
    - name: Set env
      run: |
        echo "KUBERNETES_VERSION=v1.25.0" >> $GITHUB_ENV
        echo "MINIKUBE_VERSION=v1.30.1" >> $GITHUB_ENV
        echo "KUBERNETES_CONFIG_FILE=$HOME/.kube/config" >> $GITHUB_ENV
        echo "CHANGE_MINIKUBE_NONE_USER=true" >> $GITHUB_ENV
        echo "CRICTL_VERSION=v1.26.0" >> $GITHUB_ENV
        echo "CRI_DOCKERD_VERSION=0.3.4" >> $GITHUB_ENV
    - name: minikube setup
      run: |
        curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$KUBERNETES_VERSION/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/$MINIKUBE_VERSION/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        # K8s 1.25+ requires crictl
        curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-amd64.tar.gz --output crictl-${CRICTL_VERSION}-linux-amd64.tar.gz && sudo tar zxvf crictl-${CRICTL_VERSION}-linux-amd64.tar.gz -C /usr/local/bin
        # K8s 1.24+ requires cri-dockerd
        curl -L https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_DOCKERD_VERSION}/cri-dockerd-${CRI_DOCKERD_VERSION}.amd64.tgz --output cri-dockerd-${CRI_DOCKERD_VERSION}.amd64.tgz && sudo tar zxvf cri-dockerd-${CRI_DOCKERD_VERSION}.amd64.tgz -C /usr/local/bin
        curl -o cri-docker.service https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service
        curl -o cri-docker.socket https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket
        sudo mv cri-docker.socket cri-docker.service /etc/systemd/system/
        sudo sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
        sudo systemctl daemon-reload
        sudo systemctl enable cri-docker.service
        sudo systemctl enable --now cri-docker.socket

        sudo mount --make-rshared /
        sudo apt-get install -y conntrack
        CHANGE_MINIKUBE_NONE_USER=true
        export KUBERNETES_CONFIG_FILE=$HOME/.kube/config
        export KUBERNETES_CONFIG_FILE=$HOME/.kube/config;export CHANGE_MINIKUBE_NONE_USER=true; sudo minikube start --driver=none --bootstrapper=kubeadm --kubernetes-version=$KUBERNETES_VERSION --cni=calico
        echo "minikube started, updating context"
        export KUBERNETES_CONFIG_FILE=$HOME/.kube/config;export CHANGE_MINIKUBE_NONE_USER=true; sudo minikube update-context
        echo "context is updated"
        #JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
        sleep 60
        sudo kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
        echo "created cluster role"
        sudo kubectl cluster-info
        echo "cluster info"
        sudo kubectl -n kube-system get pod -o wide
        sudo kubectl create secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username="testanisha"  --docker-password="123456789" --docker-email=testimage456@gmail.com
    - name: E2E
      run: sudo make test-e2e
  publish:
    name: Publish docker image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'created'
    steps:
    - name: Pushing docker images
      run: sudo make push
    - name: Uploading binary files
      uses: actions/upload-artifact@v2
      with:
        name: zookeeper-exporter
        path: bin/zookeeper-exporter*
